#! /usr/bin/python
# Copyright 2016 EMC Corporation

import os
import sys
import getopt
from emc_vmax_smis.vmax_smis_masking import VmaxSmisMasking

PROGNAME = os.path.basename(sys.argv[0])
USAGE = ('Usage: {0} '
         '-h <host>|--host <host> '
         '-s <symm_id>|--sid <symm_id> '
         '[-u <username>|--user <username>] '
         '[-p <password>|--password <password>] '
         '[-S|--use_ssl]\n'.format(PROGNAME))


def usage():
    sys.stderr.write(USAGE)
    return 2


def main():
    try:
        options, remainder = getopt.getopt(sys.argv[1:], 'h:s:u:p:Sn:V:P:I:',
                                           ['host=', 'sid=', 'user=', 'password=', 'use_ssl',
                                            'name=', 'sg=', 'pg=', 'ig='])
    except getopt.GetoptError as err:
        sys.stderr.write('{0!s}\n'.format(err))
        sys.exit(usage())

    host = os.getenv('SMIS_HOST', None)
    sid = os.getenv('SMIS_SID', None)
    user = os.getenv('SMIS_USER', 'admin')
    password = os.getenv('SMIS_PASSWORD', '#1Password')
    use_ssl = False
    port = 5988
    name = None
    sg_name = None
    pg_name = None
    ig_name = None
    for opt, arg in options:
        if opt in ('-h', '--host'):
            host = arg
        elif opt in ('-s', '--sid'):
            sid = arg
        elif opt in ('-u', '--user'):
            user = arg
        elif opt in ('-p', '--password'):
            password = arg
        elif opt in ('-S', '--use_ssl'):
            use_ssl = True
            port = 5989
        elif opt in ('-n', '--name'):
            name = arg
        elif opt in ('-V', '--sg'):
            sg_name = arg
        elif opt in ('-P', '--pg'):
            pg_name = arg
        elif opt in ('-I', '--ig'):
            ig_name = arg
        else:
            sys.exit(usage())

    if host is None or sid is None or name is None or \
            sg_name is None or pg_name is None or ig_name is None:
        sys.exit(usage())

    smis_masking = VmaxSmisMasking(host=host, port=port, user=user, passwd=password, use_ssl=use_ssl)

    for system_name in smis_masking.smis_base.list_storage_system_names():
        if system_name.endswith(sid):
            break
    else:
        raise ReferenceError('%s: symmetrix id not found' % sid)

    masking_views = smis_masking.list_mv_instance_ids(system_name)
    if name in masking_views:
        print '%s : MV already exists' % ig_name
        sys.exit(1)

    smis_masking.create_masking_view(system_name, name, ig_name, sg_name, pg_name)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
