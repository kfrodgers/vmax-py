#! /usr/bin/python
# Copyright 2016 EMC Corporation

import os
import sys
import getopt
from emc_vmax_smis.vmax_smis_base import VmaxSmisBase
from emc_vmax_smis.vmax_smis_devices import VmaxSmisDevices

PROGNAME = os.path.basename(sys.argv[0])
USAGE = ('Usage: {0} '
         '-h <host>|--host <host> '
         '-s <symm_id>|--sid <symm_id> '
         '[-u <username>|--user <username>] '
         '[-p <password>|--password <password>] '
         '[-n <name>|--name=<name>] [-S|--use_ssl]\n'.format(PROGNAME))


def usage():
    sys.stderr.write(USAGE)
    sys.exit(2)


def main():
    try:
        options, remainder = getopt.getopt(sys.argv[1:], 'h:s:u:p:n:S',
                                           ['host=', 'sid=', 'user=', 'password=', 'name=', 'use_ssl'])
    except getopt.GetoptError as err:
        sys.stderr.write('{0!s}\n'.format(err))
        usage()

    host = os.getenv('SMIS_HOST', None)
    sid = os.getenv('SMIS_SID', None)
    user = os.getenv('SMIS_USER', 'admin')
    password = os.getenv('SMIS_PASSWORD', '#1Password')
    name = None
    use_ssl = False
    port = 5988
    for opt, arg in options:
        if opt in ('-h', '--host'):
            host = arg
        elif opt in ('-s', '--sid'):
            sid = arg
        elif opt in ('-u', '--user'):
            user = arg
        elif opt in ('-p', '--password'):
            password = arg
        elif opt in ('-n', '--name'):
            name = arg
        elif opt in ('-S', '--use_ssl'):
            use_ssl = True
            port = 5989
        else:
            usage()

    if host is None or sid is None:
        usage()

    smis_base = VmaxSmisBase(host=host, port=port, user=user, passwd=password, use_ssl=use_ssl)
    smis_devices = VmaxSmisDevices(smis_base=smis_base)

    for system_name in smis_base.list_storage_system_names():
        if system_name.endswith(sid):
            break
    else:
        raise ReferenceError('%s: symmetrix id not found' % sid)

    for dev_id in smis_devices.list_all_devices(system_name):
        volume = smis_devices.get_volume_instance(system_name, dev_id)
        if name is None or volume['ElementName'].startswith(name):
            print str(dev_id) + '\tName=' + volume['ElementName'] + '\tIsMapped=' \
                  + str(volume['EMCIsMapped']) + '\t' + str(smis_devices.get_storage_group(system_name, dev_id))

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
